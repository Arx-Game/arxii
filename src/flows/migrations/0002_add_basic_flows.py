"""Add skeletons for very basic flows that are foundational to gameplay."""

# Generated by Django 5.2.4 on 2025-07-24 03:43

from django.db import migrations


def create_basic_flows(apps, schema_editor):
    FlowDefinition = apps.get_model("flows", "FlowDefinition")
    FlowStepDefinition = apps.get_model("flows", "FlowStepDefinition")
    Event = apps.get_model("flows", "Event")

    look_flow, _ = FlowDefinition.objects.get_or_create(
        name="look",
        defaults={
            "description": "Send a formatted description of the target to the caller.",
        },
    )

    Event.objects.get_or_create(key="look_at", defaults={"label": "Look At"})

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent=None,
        action="call_service_function",
        variable_name="get_formatted_description",
        defaults={
            "parameters": {"obj": "$target", "mode": "$mode", "result_variable": "desc"}
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="send_message",
        defaults={"parameters": {"recipient": "$caller", "text": "$desc"}},
    )

    step3, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step2.id,
        action="emit_flow_event",
        variable_name="look_at_target",
        defaults={
            "parameters": {
                "event_type": "look_at",
                "data": {"caller": "$caller", "target": "$target"},
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step3.id,
        action="emit_flow_event_for_each",
        variable_name="look_at_contents",
        defaults={
            "parameters": {
                "iterable": "$target.contents",
                "event_type": "look_at",
                "data": {"caller": "$caller", "target": "$item"},
                "item_key": None,
            }
        },
    )


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            create_basic_flows, reverse_code=migrations.RunPython.noop
        ),
    ]
