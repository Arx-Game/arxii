"""Add skeletons for very basic flows that are foundational to gameplay."""

# Generated by Django 5.2.4 on 2025-07-24 03:43

from django.db import migrations


def create_basic_flows(apps, schema_editor):
    FlowDefinition = apps.get_model("flows", "FlowDefinition")
    FlowStepDefinition = apps.get_model("flows", "FlowStepDefinition")
    Event = apps.get_model("flows", "Event")

    look_flow, _ = FlowDefinition.objects.get_or_create(
        name="look",
        defaults={
            "description": "Send a formatted description of the target to the caller.",
        },
    )

    look_event, _ = Event.objects.get_or_create(
        name="look_at", defaults={"label": "Look At"}
    )

    # Create the generic pre-move event used by several flows.
    move_event, _ = Event.objects.get_or_create(
        name="object_pre_move",
        defaults={"label": "Object Pre-Move"},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=look_event.name,
        defaults={
            "parameters": {
                "event_type": look_event.name,
                "data": {"caller": "$caller", "target": "$target"},
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="get_formatted_description",
        defaults={
            "parameters": {"obj": "$target", "mode": "$mode", "result_variable": "desc"}
        },
    )

    step3, _ = FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step2.id,
        action="emit_flow_event_for_each",
        variable_name=look_event.name,
        defaults={
            "parameters": {
                "iterable": "$target.contents",
                "event_type": look_event.name,
                "data": {"caller": "$caller", "target": "$item"},
                "item_key": None,
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=look_flow,
        parent_id=step3.id,
        action="call_service_function",
        variable_name="send_message",
        defaults={"parameters": {"recipient": "$caller", "text": "$desc"}},
    )

    # Get flow
    get_flow, _ = FlowDefinition.objects.get_or_create(
        name="get",
        defaults={"description": "Move an item to the caller."},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=get_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=move_event.name,
        defaults={
            "parameters": {
                "event_type": move_event.name,
                "data": {
                    "caller": "$caller",
                    "target": "$target",
                    "destination": "$caller",
                },
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=get_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="move_object",
        defaults={"parameters": {"obj": "$target", "destination": "$caller"}},
    )

    FlowStepDefinition.objects.get_or_create(
        flow=get_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "target": "$target",
                "text": ["$You() $conj(pick) up $you(target)."],
            }
        },
    )

    # Drop flow
    drop_flow, _ = FlowDefinition.objects.get_or_create(
        name="drop",
        defaults={"description": "Drop an item into the room."},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=drop_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=move_event.name,
        defaults={
            "parameters": {
                "event_type": move_event.name,
                "data": {
                    "caller": "$caller",
                    "target": "$target",
                    "destination": "$caller.location",
                },
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=drop_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="move_object",
        defaults={"parameters": {"obj": "$target", "destination": "$caller.location"}},
    )

    FlowStepDefinition.objects.get_or_create(
        flow=drop_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "target": "$target",
                "text": ["$You() $conj(drop) $you(target)."],
            }
        },
    )

    # Give flow
    give_flow, _ = FlowDefinition.objects.get_or_create(
        name="give",
        defaults={"description": "Give an item to another character."},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=give_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=move_event.name,
        defaults={
            "parameters": {
                "event_type": move_event.name,
                "data": {
                    "caller": "$caller",
                    "target": "$target",
                    "destination": "$recipient",
                },
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=give_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="move_object",
        defaults={"parameters": {"obj": "$target", "destination": "$recipient"}},
    )

    FlowStepDefinition.objects.get_or_create(
        flow=give_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "target": "$recipient",
                "text": ["$You() $conj(give) $you(target) something."],
            }
        },
    )

    # Home flow
    home_flow, _ = FlowDefinition.objects.get_or_create(
        name="home",
        defaults={"description": "Return the caller to their home."},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=home_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=move_event.name,
        defaults={
            "parameters": {
                "event_type": move_event.name,
                "data": {
                    "caller": "$caller",
                    "target": "$caller",
                    "destination": "$caller.home",
                },
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=home_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="move_object",
        defaults={"parameters": {"obj": "$caller", "destination": "$caller.home"}},
    )

    FlowStepDefinition.objects.get_or_create(
        flow=home_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "text": ["$You() $conj(go) home."],
            }
        },
    )

    # Inventory flow
    inventory_flow, _ = FlowDefinition.objects.get_or_create(
        name="inventory",
        defaults={"description": "List carried items."},
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=inventory_flow,
        parent=None,
        action="emit_flow_event_for_each",
        variable_name=look_event.name,
        defaults={
            "parameters": {
                "iterable": "$caller.contents",
                "event_type": look_event.name,
                "data": {"caller": "$caller", "target": "$item"},
                "item_key": None,
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=inventory_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="show_inventory",
        defaults={"parameters": {"caller": "$caller"}},
    )

    # Say flow
    say_flow, _ = FlowDefinition.objects.get_or_create(
        name="say",
        defaults={"description": "Speak aloud to the room."},
    )

    say_event, _ = Event.objects.get_or_create(name="say", defaults={"label": "Say"})

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=say_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=say_event.name,
        defaults={
            "parameters": {
                "event_type": say_event.name,
                "data": {"caller": "$caller", "text": "$text"},
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=say_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "text": ['$You() $conj(say) "', "$text", '"'],
            }
        },
    )

    # Whisper flow
    whisper_flow, _ = FlowDefinition.objects.get_or_create(
        name="whisper",
        defaults={"description": "Whisper to a target."},
    )

    whisper_event, _ = Event.objects.get_or_create(
        name="whisper", defaults={"label": "Whisper"}
    )

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=whisper_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=whisper_event.name,
        defaults={
            "parameters": {
                "event_type": whisper_event.name,
                "data": {"caller": "$caller", "target": "$target", "text": "$text"},
            }
        },
    )

    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=whisper_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="send_message",
        defaults={
            "parameters": {
                "recipient": "$target",
                "text": ['$You(caller) whisper "', "$text", '"'],
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=whisper_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="send_message",
        defaults={
            "parameters": {
                "recipient": "$caller",
                "text": ['You whisper "', "$text", '" to $you(target).'],
            }
        },
    )

    # Pose flow
    pose_flow, _ = FlowDefinition.objects.get_or_create(
        name="pose",
        defaults={"description": "Emote an action."},
    )

    pose_event, _ = Event.objects.get_or_create(name="pose", defaults={"label": "Pose"})

    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=pose_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=pose_event.name,
        defaults={
            "parameters": {
                "event_type": pose_event.name,
                "data": {"caller": "$caller", "text": "$text"},
            }
        },
    )

    FlowStepDefinition.objects.get_or_create(
        flow=pose_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="message_location",
        defaults={
            "parameters": {
                "caller": "$caller",
                "text": ["$You() $text"],
            }
        },
    )
    # Exit traversal flow
    exit_traverse_event, _ = Event.objects.get_or_create(
        name="exit_traverse_attempt",
        defaults={"label": "Exit Traverse Attempt"},
    )

    exit_traverse_flow, _ = FlowDefinition.objects.get_or_create(
        name="exit_traverse",
        defaults={"description": "Traverse an exit to its destination."},
    )

    # Step 1: Emit the traverse attempt event
    step1, _ = FlowStepDefinition.objects.get_or_create(
        flow=exit_traverse_flow,
        parent=None,
        action="emit_flow_event",
        variable_name=exit_traverse_event.name,
        defaults={
            "parameters": {
                "event_type": exit_traverse_event.name,
                "data": {
                    "caller": "$caller",
                    "exit": "$target",
                    "destination": "$target.destination",
                },
            }
        },
    )

    # Step 2: Check if traversal is permitted
    step2, _ = FlowStepDefinition.objects.get_or_create(
        flow=exit_traverse_flow,
        parent_id=step1.id,
        action="call_service_function",
        variable_name="check_exit_traversal",
        defaults={
            "parameters": {
                "caller": "$caller",
                "exit": "$target",
            }
        },
    )

    # Step 3: Move the character through the exit
    FlowStepDefinition.objects.get_or_create(
        flow=exit_traverse_flow,
        parent_id=step2.id,
        action="call_service_function",
        variable_name="traverse_exit",
        defaults={
            "parameters": {
                "caller": "$caller",
                "exit": "$target",
                "destination": "$target.destination",
            }
        },
    )

    # Create a trigger definition for custom exit behavior
    TriggerDefinition = apps.get_model("flows", "TriggerDefinition")

    # Custom exit traversal trigger that can override default behavior
    TriggerDefinition.objects.get_or_create(
        name="custom_exit_traversal",
        defaults={
            "event": exit_traverse_event,
            "flow_definition": exit_traverse_flow,
            "description": "Trigger for custom exit traversal behavior. Can be attached to exits to override default traversal.",
            "priority": 100,  # High priority to override default behavior
        },
    )


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0001_initial"),
    ]

    operations = [
        migrations.RunPython(
            create_basic_flows, reverse_code=migrations.RunPython.noop
        ),
    ]
