# Generated by Django 5.2.4 on 2025-08-05 23:34

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("evennia_extensions", "0001_initial"),
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Roster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Active, Inactive, Available",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this roster category"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Can characters in this roster be played?",
                    ),
                ),
                (
                    "allow_applications",
                    models.BooleanField(
                        default=True,
                        help_text="Can players apply for characters in this roster?",
                    ),
                ),
                (
                    "sort_order",
                    models.PositiveIntegerField(default=0, help_text="Display order"),
                ),
            ],
            options={
                "ordering": ["sort_order", "name"],
            },
        ),
        migrations.CreateModel(
            name="RosterEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("joined_roster", models.DateTimeField(auto_now_add=True)),
                (
                    "frozen",
                    models.BooleanField(
                        default=False,
                        help_text="Character temporarily frozen (rarely used)",
                    ),
                ),
                ("gm_notes", models.TextField(blank=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roster_entry",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "previous_roster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="former_entries",
                        to="roster.roster",
                    ),
                ),
                (
                    "roster",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="roster.roster",
                    ),
                ),
            ],
            options={
                "verbose_name": "Roster Entry",
                "verbose_name_plural": "Roster Entries",
            },
        ),
        migrations.CreateModel(
            name="RosterTenure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "player_number",
                    models.PositiveIntegerField(
                        help_text="1st, 2nd, 3rd player of this character"
                    ),
                ),
                ("start_date", models.DateTimeField()),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True, help_text="null = current player", null=True
                    ),
                ),
                ("applied_date", models.DateTimeField()),
                ("approved_date", models.DateTimeField(blank=True, null=True)),
                (
                    "tenure_notes",
                    models.TextField(
                        blank=True, help_text="Notes about this specific tenure"
                    ),
                ),
                (
                    "photo_folder",
                    models.CharField(
                        blank=True,
                        help_text="Cloudinary folder for this tenure's photos",
                        max_length=255,
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="approved_tenures",
                        to="evennia_extensions.playerdata",
                    ),
                ),
                (
                    "player_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenures",
                        to="evennia_extensions.playerdata",
                    ),
                ),
                (
                    "roster_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenures",
                        to="roster.rosterentry",
                    ),
                ),
            ],
            options={
                "verbose_name": "Roster Tenure",
                "verbose_name_plural": "Roster Tenures",
            },
        ),
        migrations.CreateModel(
            name="PlayerMail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject", models.CharField(max_length=200)),
                ("message", models.TextField()),
                ("sent_date", models.DateTimeField(auto_now_add=True)),
                ("read_date", models.DateTimeField(blank=True, null=True)),
                ("archived", models.BooleanField(default=False)),
                (
                    "in_reply_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="replies",
                        to="roster.playermail",
                    ),
                ),
                (
                    "sender_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_mail",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender_character",
                    models.ForeignKey(
                        blank=True,
                        help_text="Character context when mail was sent",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_mail",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "recipient_tenure",
                    models.ForeignKey(
                        help_text="Mail targets the character, routes to current player via roster entry",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_mail",
                        to="roster.rostertenure",
                    ),
                ),
            ],
            options={
                "ordering": ["-sent_date"],
            },
        ),
        migrations.CreateModel(
            name="TenureDisplaySettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "public_character_info",
                    models.BooleanField(
                        default=True,
                        help_text="Show character in public roster listings",
                    ),
                ),
                (
                    "show_online_status",
                    models.BooleanField(
                        default=True, help_text="Show when this character is online"
                    ),
                ),
                (
                    "allow_pages",
                    models.BooleanField(
                        default=True,
                        help_text="Allow other players to page this character",
                    ),
                ),
                (
                    "allow_tells",
                    models.BooleanField(
                        default=True,
                        help_text="Allow other players to send tells to this character",
                    ),
                ),
                (
                    "rp_preferences",
                    models.CharField(
                        blank=True,
                        help_text="Freeform RP preferences and notes",
                        max_length=500,
                    ),
                ),
                (
                    "plot_involvement",
                    models.CharField(
                        choices=[
                            ("high", "High - Very Active"),
                            ("medium", "Medium - Moderate"),
                            ("low", "Low - Minimal"),
                            ("none", "None - Social Only"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "tenure",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="display_settings",
                        to="roster.rostertenure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenure Display Settings",
                "verbose_name_plural": "Tenure Display Settings",
            },
        ),
        migrations.CreateModel(
            name="TenureMedia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("sort_order", models.PositiveIntegerField(default=0)),
                (
                    "is_public",
                    models.BooleanField(
                        default=True, help_text="Visible to other players"
                    ),
                ),
                (
                    "media",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenure_links",
                        to="evennia_extensions.playermedia",
                    ),
                ),
                (
                    "tenure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="media",
                        to="roster.rostertenure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Tenure Media",
                "verbose_name_plural": "Tenure Media",
                "ordering": ["sort_order", "-media__uploaded_date"],
                "indexes": [
                    models.Index(
                        fields=["tenure", "sort_order"],
                        name="roster_tenu_tenure__c3b6cf_idx",
                    )
                ],
            },
        ),
        migrations.AddField(
            model_name="rosterentry",
            name="profile_picture",
            field=models.ForeignKey(
                blank=True,
                help_text="Profile picture for this character",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="profile_for_entries",
                to="roster.tenuremedia",
            ),
        ),
        migrations.CreateModel(
            name="RosterApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Review"),
                            ("approved", "Approved"),
                            ("denied", "Denied"),
                            ("withdrawn", "Withdrawn"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("applied_date", models.DateTimeField(auto_now_add=True)),
                ("reviewed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "application_text",
                    models.TextField(help_text="Why player wants this character"),
                ),
                (
                    "review_notes",
                    models.TextField(
                        blank=True, help_text="Staff notes on application"
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "player_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="applications",
                        to="evennia_extensions.playerdata",
                    ),
                ),
                (
                    "reviewed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="reviewed_applications",
                        to="evennia_extensions.playerdata",
                    ),
                ),
            ],
            options={
                "verbose_name": "Roster Application",
                "verbose_name_plural": "Roster Applications",
                "ordering": ["-applied_date"],
                "unique_together": {("player_data", "character")},
            },
        ),
        migrations.AddIndex(
            model_name="rostertenure",
            index=models.Index(
                fields=["roster_entry", "end_date"],
                name="roster_rost_roster__507836_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="rostertenure",
            index=models.Index(
                fields=["player_data", "end_date"],
                name="roster_rost_player__cb9c74_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rostertenure",
            unique_together={("roster_entry", "player_number")},
        ),
        migrations.AddIndex(
            model_name="playermail",
            index=models.Index(
                fields=["recipient_tenure", "read_date"],
                name="roster_play_recipie_e0b33c_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="playermail",
            index=models.Index(
                fields=["sender_account", "sent_date"],
                name="roster_play_sender__2c3255_idx",
            ),
        ),
    ]
