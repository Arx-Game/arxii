# Generated by Django 5.2.4 on 2025-08-03 19:30

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CheckOutcome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Outcome name (e.g., 'Success', 'Catastrophic Failure')",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this outcome means"
                    ),
                ),
                (
                    "success_level",
                    models.SmallIntegerField(
                        default=0,
                        help_text="Numeric success level (-10 worst failure to +10 best success)",
                    ),
                ),
                (
                    "display_template",
                    models.TextField(
                        blank=True,
                        help_text="Optional template for displaying this outcome",
                    ),
                ),
            ],
            options={
                "ordering": ["success_level", "name"],
                "indexes": [
                    models.Index(
                        fields=["success_level"], name="traits_chec_success_381fcf_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CheckRank",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rank",
                    models.SmallIntegerField(
                        help_text="Rank level (0 = weakest, higher = stronger)",
                        unique=True,
                    ),
                ),
                (
                    "min_points",
                    models.PositiveIntegerField(
                        help_text="Minimum points needed to achieve this rank"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this rank level", max_length=50
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of what this rank represents"
                    ),
                ),
            ],
            options={
                "ordering": ["rank"],
                "indexes": [
                    models.Index(fields=["rank"], name="traits_chec_rank_f4436d_idx"),
                    models.Index(
                        fields=["min_points"], name="traits_chec_min_poi_2eb736_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="PointConversionRange",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "trait_type",
                    models.CharField(
                        choices=[
                            ("stat", "Stat"),
                            ("skill", "Skill"),
                            ("other", "Other"),
                        ],
                        help_text="Type of trait this conversion applies to",
                        max_length=10,
                    ),
                ),
                (
                    "min_value",
                    models.IntegerField(
                        help_text="Minimum trait value for this range (inclusive)"
                    ),
                ),
                (
                    "max_value",
                    models.IntegerField(
                        help_text="Maximum trait value for this range (inclusive)"
                    ),
                ),
                (
                    "points_per_level",
                    models.SmallIntegerField(
                        help_text="Points awarded per trait level in this range"
                    ),
                ),
            ],
            options={
                "ordering": ["trait_type", "min_value"],
                "indexes": [
                    models.Index(
                        fields=["trait_type", "min_value"],
                        name="traits_poin_trait_t_676c17_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ResultChart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rank_difference",
                    models.SmallIntegerField(
                        help_text="Rank difference this chart applies to (roller rank - target rank)",
                        unique=True,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Descriptive name for this difficulty level",
                        max_length=50,
                    ),
                ),
            ],
            options={
                "ordering": ["rank_difference"],
                "indexes": [
                    models.Index(
                        fields=["rank_difference"],
                        name="traits_resu_rank_di_8bcb2e_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Trait",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Trait name (e.g., 'strength', 'sewing', 'weaponsmithing')",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "trait_type",
                    models.CharField(
                        choices=[
                            ("stat", "Stat"),
                            ("skill", "Skill"),
                            ("other", "Other"),
                        ],
                        help_text="Classification of trait for mechanics and advancement",
                        max_length=10,
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("physical", "Physical"),
                            ("social", "Social"),
                            ("mental", "Mental"),
                            ("magic", "Magic"),
                            ("combat", "Combat"),
                            ("general", "General"),
                            ("crafting", "Crafting"),
                            ("other", "Other"),
                        ],
                        help_text="Category for organization and special rules",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description of what this trait represents",
                    ),
                ),
                (
                    "is_public",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this trait should display by default in character sheets",
                    ),
                ),
            ],
            options={
                "ordering": ["trait_type", "category", "name"],
                "indexes": [
                    models.Index(
                        fields=["trait_type", "category"],
                        name="traits_trai_trait_t_9e7872_idx",
                    ),
                    models.Index(
                        fields=["is_public"], name="traits_trai_is_publ_215e60_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="CharacterTraitValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        help_text="Current trait value (can be any integer)"
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trait_values",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_values",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["character", "trait"],
                        name="traits_char_charact_16131a_idx",
                    ),
                    models.Index(
                        fields=["character"], name="traits_char_charact_d74507_idx"
                    ),
                ],
                "unique_together": {("character", "trait")},
            },
        ),
        migrations.CreateModel(
            name="ResultChartOutcome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "min_roll",
                    models.SmallIntegerField(
                        help_text="Minimum roll (1-100) for this outcome",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "max_roll",
                    models.SmallIntegerField(
                        help_text="Maximum roll (1-100) for this outcome",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outcomes",
                        to="traits.resultchart",
                    ),
                ),
                (
                    "outcome",
                    models.ForeignKey(
                        help_text="The outcome that occurs for rolls in this range",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="traits.checkoutcome",
                    ),
                ),
            ],
            options={
                "ordering": ["chart", "min_roll"],
                "indexes": [
                    models.Index(
                        fields=["chart", "min_roll"],
                        name="traits_resu_chart_i_be24eb_idx",
                    )
                ],
                "unique_together": {("chart", "min_roll")},
            },
        ),
        migrations.CreateModel(
            name="TraitRankDescription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.IntegerField(
                        help_text="Trait value this description applies to"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Descriptive name (can be lengthy and flowery)",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Longer description of what this trait level means",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rank_descriptions",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["trait", "value"],
                "indexes": [
                    models.Index(
                        fields=["trait", "value"], name="traits_trai_trait_i_52121d_idx"
                    )
                ],
                "unique_together": {("trait", "value")},
            },
        ),
    ]
