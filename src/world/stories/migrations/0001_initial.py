# Generated by Django 5.2.4 on 2025-08-12 00:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
        ("scenes", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Chapter",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("order", models.PositiveIntegerField()),
                ("is_active", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Summary of what happened in this chapter"
                    ),
                ),
                (
                    "consequences",
                    models.TextField(
                        blank=True,
                        help_text="Key consequences that affect future chapters",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "ordering": ["story", "order"],
            },
        ),
        migrations.CreateModel(
            name="Episode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("order", models.PositiveIntegerField()),
                ("is_active", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="Summary of this episode's plot beats"
                    ),
                ),
                (
                    "consequences",
                    models.TextField(
                        blank=True,
                        help_text="What consequences lead to the next episode",
                    ),
                ),
                (
                    "connection_to_next",
                    models.CharField(
                        blank=True,
                        choices=[("therefore", "Therefore"), ("but", "But")],
                        help_text="How this episode connects to the next",
                        max_length=20,
                    ),
                ),
                (
                    "connection_summary",
                    models.TextField(
                        blank=True, help_text="Explanation of how episodes connect"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "chapter",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="episodes",
                        to="stories.chapter",
                    ),
                ),
            ],
            options={
                "ordering": ["chapter", "order"],
                "unique_together": {("chapter", "order")},
            },
        ),
        migrations.CreateModel(
            name="PlayerTrust",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gm_trust_level",
                    models.IntegerField(
                        choices=[
                            (0, "Untrusted"),
                            (1, "Basic"),
                            (2, "Intermediate"),
                            (3, "Advanced"),
                            (4, "Expert"),
                        ],
                        default=0,
                        help_text="General GM trust level, not category-specific",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "account",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trust_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Story",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="inactive",
                        max_length=20,
                    ),
                ),
                (
                    "privacy",
                    models.CharField(
                        choices=[
                            ("public", "Public"),
                            ("private", "Private"),
                            ("invite_only", "Invite Only"),
                        ],
                        default="public",
                        max_length=20,
                    ),
                ),
                (
                    "is_personal_story",
                    models.BooleanField(
                        default=False,
                        help_text="True if this is a character's personal story arc",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "active_gms",
                    models.ManyToManyField(
                        help_text="GM characters currently running this story",
                        limit_choices_to={"db_typeclass_path__contains": "GMCharacter"},
                        related_name="gm_stories",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        help_text="Players who own and can manage this story",
                        related_name="owned_stories",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "personal_story_character",
                    models.ForeignKey(
                        blank=True,
                        help_text="Character this personal story belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="personal_story",
                        to="objects.objectdb",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "stories",
            },
        ),
        migrations.AddField(
            model_name="chapter",
            name="story",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chapters",
                to="stories.story",
            ),
        ),
        migrations.CreateModel(
            name="StoryFeedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_gm_feedback",
                    models.BooleanField(
                        default=False,
                        help_text="True if feedback is about GM performance",
                    ),
                ),
                ("comments", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "reviewed_player",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "reviewer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="given_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "story",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="feedback",
                        to="stories.story",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TrustCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Short name for the trust category (e.g., 'antagonism', 'mature_themes')",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable display name (e.g., 'Antagonistic Roleplay')",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Description of what this trust category covers and why trust is needed"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this category is currently in use",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Account that created this trust category",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Trust Categories",
            },
        ),
        migrations.CreateModel(
            name="StoryTrustRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "minimum_trust_level",
                    models.IntegerField(
                        choices=[
                            (0, "Untrusted"),
                            (1, "Basic"),
                            (2, "Intermediate"),
                            (3, "Advanced"),
                            (4, "Expert"),
                        ],
                        default=1,
                        help_text="Minimum trust level required for this category",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Why this trust requirement was added"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        help_text="Who added this requirement",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "story",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trust_requirements",
                        to="stories.story",
                    ),
                ),
                (
                    "trust_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stories.trustcategory",
                    ),
                ),
            ],
            options={
                "unique_together": {("story", "trust_category")},
            },
        ),
        migrations.AddField(
            model_name="story",
            name="required_trust_categories",
            field=models.ManyToManyField(
                blank=True,
                help_text="Trust categories required to participate in this story",
                through="stories.StoryTrustRequirement",
                to="stories.trustcategory",
            ),
        ),
        migrations.CreateModel(
            name="PlayerTrustLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "trust_level",
                    models.IntegerField(
                        choices=[
                            (0, "Untrusted"),
                            (1, "Basic"),
                            (2, "Intermediate"),
                            (3, "Advanced"),
                            (4, "Expert"),
                        ],
                        default=0,
                    ),
                ),
                ("positive_feedback_count", models.PositiveIntegerField(default=0)),
                ("negative_feedback_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Notes about why this trust level was granted or revoked",
                    ),
                ),
                (
                    "player_trust",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trust_levels",
                        to="stories.playertrust",
                    ),
                ),
                (
                    "trust_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="player_trust_levels",
                        to="stories.trustcategory",
                    ),
                ),
            ],
            options={
                "unique_together": {("player_trust", "trust_category")},
            },
        ),
        migrations.AddField(
            model_name="playertrust",
            name="trust_categories",
            field=models.ManyToManyField(
                blank=True,
                help_text="Trust categories and levels for this player",
                through="stories.PlayerTrustLevel",
                to="stories.trustcategory",
            ),
        ),
        migrations.CreateModel(
            name="TrustCategoryFeedbackRating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        choices=[
                            (-2, "Very Poor"),
                            (-1, "Poor"),
                            (0, "Neutral/No Opinion"),
                            (1, "Good"),
                            (2, "Excellent"),
                        ],
                        help_text="Rating for how well this player handled this trust category",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Specific notes about performance in this category",
                    ),
                ),
                (
                    "feedback",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="category_ratings",
                        to="stories.storyfeedback",
                    ),
                ),
                (
                    "trust_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="stories.trustcategory",
                    ),
                ),
            ],
            options={
                "unique_together": {("feedback", "trust_category")},
            },
        ),
        migrations.AddField(
            model_name="storyfeedback",
            name="trust_categories",
            field=models.ManyToManyField(
                blank=True,
                help_text="Trust categories this feedback applies to with ratings",
                through="stories.TrustCategoryFeedbackRating",
                to="stories.trustcategory",
            ),
        ),
        migrations.CreateModel(
            name="EpisodeScene",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField()),
                (
                    "connection_to_next",
                    models.CharField(
                        blank=True,
                        choices=[("therefore", "Therefore"), ("but", "But")],
                        help_text="How this scene connects to the next in the episode",
                        max_length=20,
                    ),
                ),
                (
                    "connection_summary",
                    models.TextField(
                        blank=True,
                        help_text="Brief explanation of the scene connection",
                    ),
                ),
                (
                    "episode",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="episode_scenes",
                        to="stories.episode",
                    ),
                ),
                (
                    "scene",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="story_episodes",
                        to="scenes.scene",
                    ),
                ),
            ],
            options={
                "ordering": ["episode", "order"],
                "unique_together": {("episode", "scene")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="chapter",
            unique_together={("story", "order")},
        ),
        migrations.CreateModel(
            name="StoryParticipation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "participation_level",
                    models.CharField(
                        choices=[
                            ("critical", "Critical"),
                            ("important", "Important"),
                            ("optional", "Optional"),
                        ],
                        default="optional",
                        max_length=20,
                    ),
                ),
                (
                    "trusted_by_owner",
                    models.BooleanField(
                        default=False,
                        help_text="Story owner has explicitly trusted this player for this story",
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="story_participations",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "story",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="participants",
                        to="stories.story",
                    ),
                ),
            ],
            options={
                "unique_together": {("story", "character")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="storyfeedback",
            unique_together={("story", "reviewer", "reviewed_player")},
        ),
    ]
