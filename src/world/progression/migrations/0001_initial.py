# Generated by Django 5.2.4 on 2025-08-12 21:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0012_defaultaccount_alter_accountdb_id_account_bot_and_more"),
        ("classes", "0001_initial"),
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
        ("scenes", "0001_initial"),
        ("traits", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ExperiencePointsData",
            fields=[
                (
                    "account",
                    models.OneToOneField(
                        help_text="The account this XP belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="experience_points_data",
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "total_earned",
                    models.PositiveIntegerField(
                        default=0, help_text="Total XP earned over time"
                    ),
                ),
                (
                    "total_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="Total XP spent over time"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Experience Points Data",
                "verbose_name_plural": "Experience Points Data",
            },
        ),
        migrations.CreateModel(
            name="XPCostChart",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name for this cost chart",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of when to use this chart"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this chart is active"
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ClassLevelUnlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_level",
                    models.PositiveIntegerField(help_text="Level being unlocked"),
                ),
                (
                    "character_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="level_unlocks",
                        to="classes.characterclass",
                    ),
                ),
            ],
            options={
                "ordering": ["character_class", "target_level"],
                "unique_together": {("character_class", "target_level")},
            },
        ),
        migrations.CreateModel(
            name="ClassLevelRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveIntegerField(
                        help_text="Minimum level required in this class"
                    ),
                ),
                (
                    "character_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="classes.characterclass",
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AchievementRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "achievement_key",
                    models.CharField(
                        help_text="Key identifying the achievement/story flag required",
                        max_length=100,
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LevelRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveIntegerField(
                        help_text="Minimum character level required"
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MultiClassLevel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveIntegerField(
                        help_text="Minimum level required in this class"
                    ),
                ),
                (
                    "character_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="classes.characterclass",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MultiClassRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "description_override",
                    models.CharField(
                        blank=True,
                        help_text="Override description (e.g., 'Two different classes at level 6+')",
                        max_length=255,
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
                (
                    "required_classes",
                    models.ManyToManyField(
                        related_name="multi_requirements",
                        through="progression.MultiClassLevel",
                        to="classes.characterclass",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="multiclasslevel",
            name="multi_class_requirement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="class_levels",
                to="progression.multiclassrequirement",
            ),
        ),
        migrations.CreateModel(
            name="RelationshipRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "relationship_target",
                    models.CharField(
                        help_text="Target of the relationship", max_length=100
                    ),
                ),
                (
                    "minimum_level",
                    models.PositiveIntegerField(
                        help_text="Minimum relationship level required"
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TierRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "minimum_tier",
                    models.PositiveIntegerField(
                        help_text="Minimum tier required (1 for levels 1-5, 2 for levels 6-10)"
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TraitRequirement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Description of this requirement"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this requirement is active"
                    ),
                ),
                (
                    "minimum_value",
                    models.PositiveIntegerField(
                        help_text="Minimum trait value required"
                    ),
                ),
                (
                    "class_level_unlock",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(class)s_requirements",
                        to="progression.classlevelunlock",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trait_requirements",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CharacterUnlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_level",
                    models.PositiveIntegerField(
                        help_text="Level unlocked for this class"
                    ),
                ),
                ("unlocked_date", models.DateTimeField(auto_now_add=True)),
                (
                    "xp_spent",
                    models.PositiveIntegerField(
                        default=0, help_text="XP actually spent on this unlock"
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unlocks",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "character_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_unlocks",
                        to="classes.characterclass",
                    ),
                ),
            ],
            options={
                "ordering": ["-unlocked_date"],
                "indexes": [
                    models.Index(
                        fields=["character", "-unlocked_date"],
                        name="progression_charact_e0cfbd_idx",
                    )
                ],
                "unique_together": {("character", "character_class", "target_level")},
            },
        ),
        migrations.CreateModel(
            name="DevelopmentPoints",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_earned",
                    models.PositiveIntegerField(
                        default=0, help_text="Total development points earned"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="development_points",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="development_points",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["character", "trait"],
                "indexes": [
                    models.Index(
                        fields=["character", "trait"],
                        name="progression_charact_f84934_idx",
                    )
                ],
                "unique_together": {("character", "trait")},
            },
        ),
        migrations.CreateModel(
            name="DevelopmentTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("scene", "Scene Participation"),
                            ("training", "Training Activity"),
                            ("practice", "Practice Session"),
                            ("teaching", "Teaching Others"),
                            ("quest", "Quest Completion"),
                            ("exploration", "Exploration"),
                            ("crafting", "Crafting Activity"),
                            ("combat", "Combat Encounter"),
                            ("social", "Social Activity"),
                            ("other", "Other Activity"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "amount",
                    models.PositiveIntegerField(
                        help_text="Development points awarded and applied"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("xp_purchase", "XP Purchase"),
                            ("scene_award", "Scene Award"),
                            ("gm_award", "GM Award"),
                            ("system_award", "System Award"),
                            ("refund", "Refund"),
                            ("correction", "GM Correction"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("description", models.CharField(blank=True, max_length=255)),
                ("transaction_date", models.DateTimeField(auto_now_add=True)),
                (
                    "character",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="development_transactions",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "gm",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="development_transactions_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "scene",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="scenes.scene",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="development_transactions",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["-transaction_date"],
                "indexes": [
                    models.Index(
                        fields=["character", "-transaction_date"],
                        name="progression_charact_6ad688_idx",
                    ),
                    models.Index(
                        fields=["trait", "-transaction_date"],
                        name="progression_trait_i_68c284_idx",
                    ),
                    models.Index(
                        fields=["scene", "-transaction_date"],
                        name="progression_scene_i_164f7a_idx",
                    ),
                ],
            },
        ),
        migrations.AlterUniqueTogether(
            name="multiclasslevel",
            unique_together={("multi_class_requirement", "character_class")},
        ),
        migrations.CreateModel(
            name="TraitRatingUnlock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "target_rating",
                    models.PositiveIntegerField(
                        help_text="Rating being unlocked (should be divisible by 10)"
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="rating_unlocks",
                        to="traits.trait",
                    ),
                ),
            ],
            options={
                "ordering": ["trait", "target_rating"],
                "unique_together": {("trait", "target_rating")},
            },
        ),
        migrations.CreateModel(
            name="TraitXPCost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost_modifier",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Cost modifier as percentage (100 = normal, 150 = 50% more expensive, 80 = 20% cheaper)",
                    ),
                ),
                (
                    "trait",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xp_costs",
                        to="traits.trait",
                    ),
                ),
                (
                    "cost_chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="trait_costs",
                        to="progression.xpcostchart",
                    ),
                ),
            ],
            options={
                "unique_together": {("trait", "cost_chart")},
            },
        ),
        migrations.CreateModel(
            name="ClassXPCost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "cost_modifier",
                    models.PositiveIntegerField(
                        default=100,
                        help_text="Cost modifier as percentage (100 = normal, 150 = 50% more expensive, 80 = 20% cheaper)",
                    ),
                ),
                (
                    "character_class",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xp_costs",
                        to="classes.characterclass",
                    ),
                ),
                (
                    "cost_chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="class_costs",
                        to="progression.xpcostchart",
                    ),
                ),
            ],
            options={
                "unique_together": {("character_class", "cost_chart")},
            },
        ),
        migrations.CreateModel(
            name="XPCostEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "level",
                    models.PositiveIntegerField(
                        help_text="Level (for classes) or rating threshold (for traits)"
                    ),
                ),
                (
                    "xp_cost",
                    models.PositiveIntegerField(
                        help_text="XP cost for this level/rating"
                    ),
                ),
                (
                    "chart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="cost_entries",
                        to="progression.xpcostchart",
                    ),
                ),
            ],
            options={
                "ordering": ["chart", "level"],
                "unique_together": {("chart", "level")},
            },
        ),
        migrations.CreateModel(
            name="XPTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "amount",
                    models.IntegerField(
                        help_text="XP change (positive for awards, negative for spending)"
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("xp_purchase", "XP Purchase"),
                            ("scene_award", "Scene Award"),
                            ("gm_award", "GM Award"),
                            ("system_award", "System Award"),
                            ("refund", "Refund"),
                            ("correction", "GM Correction"),
                            ("other", "Other"),
                        ],
                        help_text="Reason for this transaction",
                        max_length=20,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, help_text="Detailed description", max_length=255
                    ),
                ),
                ("transaction_date", models.DateTimeField(auto_now_add=True)),
                (
                    "account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="xp_transactions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "character",
                    models.ForeignKey(
                        blank=True,
                        help_text="Character this XP was spent on (if applicable)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="objects.objectdb",
                    ),
                ),
                (
                    "gm",
                    models.ForeignKey(
                        blank=True,
                        help_text="GM who made this change",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="xp_transactions_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-transaction_date"],
                "indexes": [
                    models.Index(
                        fields=["account", "-transaction_date"],
                        name="progression_account_33a39c_idx",
                    ),
                    models.Index(
                        fields=["character", "-transaction_date"],
                        name="progression_charact_a7f627_idx",
                    ),
                ],
            },
        ),
    ]
