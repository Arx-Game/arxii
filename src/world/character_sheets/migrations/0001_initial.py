# Generated by Django 5.2.4 on 2025-08-10 18:16

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("evennia_extensions", "0001_initial"),
        ("objects", "0013_defaultobject_alter_objectdb_id_defaultcharacter_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Characteristic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Internal name for this characteristic type",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        help_text="Human-readable name for this characteristic",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this characteristic represents",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this characteristic is available for use",
                    ),
                ),
                (
                    "required_for_races",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="List of race names this characteristic is required for",
                    ),
                ),
            ],
            options={
                "verbose_name": "Characteristic Type",
                "verbose_name_plural": "Characteristic Types",
                "ordering": ["display_name"],
            },
        ),
        migrations.CreateModel(
            name="Race",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Race name (e.g., Human, Elven)",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("description", models.TextField(help_text="Description of this race")),
                (
                    "allowed_in_chargen",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this race is available during character creation",
                    ),
                ),
            ],
            options={
                "verbose_name": "Race",
                "verbose_name_plural": "Races",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="CharacteristicValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="The specific value (e.g., 'blue', 'tall', etc.)",
                        max_length=100,
                    ),
                ),
                (
                    "display_value",
                    models.CharField(
                        blank=True,
                        help_text="Display version of the value (defaults to value)",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Optional description of this value"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this value is available for selection",
                    ),
                ),
                (
                    "characteristic",
                    models.ForeignKey(
                        help_text="The characteristic type this value belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="character_sheets.characteristic",
                    ),
                ),
                (
                    "allowed_for_races",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Races this value is allowed for (empty = all races)",
                        related_name="allowed_characteristic_values",
                        to="character_sheets.race",
                    ),
                ),
            ],
            options={
                "verbose_name": "Characteristic Value",
                "verbose_name_plural": "Characteristic Values",
                "ordering": ["characteristic__display_name", "display_value"],
                "unique_together": {("characteristic", "value")},
            },
        ),
        migrations.CreateModel(
            name="Subrace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Subrace name (e.g., Nox'alfar)", max_length=100
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="Description of this subrace"),
                ),
                (
                    "allowed_in_chargen",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this subrace is available during character creation",
                    ),
                ),
                (
                    "additional_characteristics",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Characteristics that this subrace adds beyond the parent race",
                        related_name="required_by_subraces",
                        to="character_sheets.characteristic",
                    ),
                ),
                (
                    "excluded_characteristics",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Characteristics that this subrace cannot have",
                        related_name="excluded_by_subraces",
                        to="character_sheets.characteristic",
                    ),
                ),
                (
                    "race",
                    models.ForeignKey(
                        help_text="The parent race this subrace belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subraces",
                        to="character_sheets.race",
                    ),
                ),
            ],
            options={
                "verbose_name": "Subrace",
                "verbose_name_plural": "Subraces",
                "ordering": ["race__name", "name"],
                "unique_together": {("race", "name")},
            },
        ),
        migrations.CreateModel(
            name="CharacterSheet",
            fields=[
                (
                    "character",
                    models.OneToOneField(
                        help_text="The character this sheet belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="sheet_data",
                        serialize=False,
                        to="objects.objectdb",
                    ),
                ),
                (
                    "age",
                    models.PositiveSmallIntegerField(
                        default=18,
                        help_text="Character's apparent age",
                        validators=[
                            django.core.validators.MinValueValidator(16),
                            django.core.validators.MaxValueValidator(200),
                        ],
                    ),
                ),
                (
                    "real_age",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        help_text="Character's true age (staff/hidden field)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("male", "Male"),
                            ("female", "Female"),
                            ("non_binary", "Non-Binary"),
                            ("other", "Other"),
                        ],
                        default="male",
                        help_text="Character's gender identity",
                        max_length=20,
                    ),
                ),
                (
                    "concept",
                    models.CharField(
                        blank=True,
                        help_text="Public character concept/archetype",
                        max_length=255,
                    ),
                ),
                (
                    "real_concept",
                    models.CharField(
                        blank=True,
                        help_text="Hidden/secret character concept (staff field)",
                        max_length=255,
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("widowed", "Widowed"),
                            ("divorced", "Divorced"),
                        ],
                        default="single",
                        help_text="Character's marital status",
                        max_length=20,
                    ),
                ),
                (
                    "family",
                    models.CharField(
                        blank=True,
                        help_text="Family name - will be converted to FK later",
                        max_length=255,
                    ),
                ),
                (
                    "vocation",
                    models.CharField(
                        blank=True,
                        help_text="Character profession - will be FK later",
                        max_length=255,
                    ),
                ),
                (
                    "social_rank",
                    models.PositiveSmallIntegerField(
                        default=10,
                        help_text="Social standing/rank (1=highest, 20=lowest)",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "birthday",
                    models.CharField(
                        blank=True,
                        help_text="Character birthday - consider DateField later",
                        max_length=255,
                    ),
                ),
                (
                    "quote",
                    models.TextField(blank=True, help_text="Character quote/motto"),
                ),
                (
                    "personality",
                    models.TextField(
                        blank=True, help_text="Character personality description"
                    ),
                ),
                (
                    "background",
                    models.TextField(
                        blank=True, help_text="Character background story"
                    ),
                ),
                (
                    "obituary",
                    models.TextField(
                        blank=True, help_text="Death notice if character is deceased"
                    ),
                ),
                (
                    "additional_desc",
                    models.TextField(
                        blank=True, help_text="Additional character description"
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "race",
                    models.ForeignKey(
                        blank=True,
                        help_text="Character's base race",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="character_sheets",
                        to="character_sheets.race",
                    ),
                ),
                (
                    "subrace",
                    models.ForeignKey(
                        blank=True,
                        help_text="Character's subrace (optional)",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="character_sheets",
                        to="character_sheets.subrace",
                    ),
                ),
            ],
            options={
                "verbose_name": "Character Sheet",
                "verbose_name_plural": "Character Sheets",
            },
        ),
        migrations.CreateModel(
            name="CharacterSheetValue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "character_sheet",
                    models.ForeignKey(
                        help_text="The character sheet this value belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="characteristic_values",
                        to="character_sheets.charactersheet",
                    ),
                ),
                (
                    "characteristic_value",
                    models.ForeignKey(
                        help_text="The characteristic value assigned to this character",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="character_sheets",
                        to="character_sheets.characteristicvalue",
                    ),
                ),
            ],
            options={
                "verbose_name": "Character Characteristic Value",
                "verbose_name_plural": "Character Characteristic Values",
                "unique_together": {("character_sheet", "characteristic_value")},
            },
        ),
        migrations.CreateModel(
            name="Guise",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for this guise", max_length=255
                    ),
                ),
                (
                    "colored_name",
                    models.CharField(
                        blank=True,
                        help_text="Name with color formatting codes for this guise",
                        max_length=255,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Physical description text for this guise"
                    ),
                ),
                (
                    "is_default",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this is the character's standard guise",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("updated_date", models.DateTimeField(auto_now=True)),
                (
                    "character",
                    models.ForeignKey(
                        help_text="The character this guise belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="guises",
                        to="objects.objectdb",
                    ),
                ),
                (
                    "thumbnail",
                    models.ForeignKey(
                        blank=True,
                        help_text="Visual representation for this guise",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="guise_thumbnails",
                        to="evennia_extensions.playermedia",
                    ),
                ),
            ],
            options={
                "verbose_name": "Character Guise",
                "verbose_name_plural": "Character Guises",
                "unique_together": {("character", "name")},
            },
        ),
    ]
