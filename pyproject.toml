[project]
name = "arxii"
version = "0.1.0"
description = "The next iteration of Arx, built on Evennia and Django"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django-environ==0.11.2",
    "evennia @ git+https://github.com/TehomCD/evennia.git",
    "factory-boy==3.3.0",
    "pre-commit==3.6.1",
    "psycopg==3.2.9",
    "psycopg[binary]",
    "typer>=0.9",
    "python-dotenv>=1.0.0",
    "cloudinary>=1.36.0",
    "django-sendgrid-v5>=1.2.3",
    "django-allauth>=0.57.0",
    "requests>=2.31.0",
    "PyJWT>=2.8.0",
    "flake8>=6.0.0",
    "coverage>=7.4.0",
    "django-extensions>=3.2.3",
    "mypy>=1.10.0",
]

[tool.black]
line-length = 88
target-version = ["py311"]

[tool.isort]
profile = "black"
line_length = 88
force_sort_within_sections = true
combine_as_imports = true
known_first_party = ["flows"]
src_paths = ["src"]

[tool.uv]
package = true

[project.scripts]
arx = "cli.arx:app"

[tool.uv.sources]
arxii = { path = "." }

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
# Strategic mypy: Complex business logic and core systems
files = [
    "src/flows",                       # Flow system - core game logic
    "src/world/traits",                # Trait system - calculations and dice
    "src/commands",                    # Command processing logic
    "src/behaviors",                   # Dynamic behavior system
    "src/world/roster",                # Character management with complex business logic
    "src/world/scenes",                # Scene system with message recording logic
    "src/world/stories",               # Story system with trust and participation logic
    "src/world/character_sheets",      # Character demographics and identity system
    "src/world/progression",           # Character advancement and rewards system
]
exclude = [
    "^.*/tests",
    "^.*/migrations",
    "^.*/admin.py",              # Django admin decorators don't type well
    "^.*/admin/.*",              # Django admin directories don't type well
    "^.*/serializers/.*",        # Django REST serializers have too much boilerplate pain
    "src/world/progression/services/scene_integration.py",  # Complex Django TextChoices typing issues
]

# More strict settings for better type coverage
warn_return_any = true
check_untyped_defs = true
disallow_untyped_defs = false  # 147 errors to fix - tackle incrementally
disallow_incomplete_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
